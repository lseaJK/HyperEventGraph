{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "第一阶段：环境与骨架搭建",
        "description": "根据需求文档V2.1，完成第一阶段的环境与骨架搭建。这包括更新依赖、确认设计文档、并创建所有必要的Agent和Admin模块的文件骨架。这个阶段为后续的Agent能力开发和工作流编排奠定基础。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "第二阶段：Agent能力工具化",
        "description": "根据需求文档V2.1，完成第二阶段的Agent能力工具化。核心任务是将项目中现有的事件抽取、关系分析、分类和存储逻辑，封装成独立的Python函数，并作为“工具”注册给对应的Agent（ExtractionAgent, RelationshipAnalysisAgent, TriageAgent, StorageAgent）。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "第三阶段：工作流编排与测试",
        "description": "根据需求文档V2.1，完成第三阶段的工作流编排与测试。主要工作是在一个主流程脚本中，使用AutoGen的GroupChatManager来初始化所有Agent，并定义它们之间的协作流程。同时，需要编写并运行集成测试，确保整个工作流在不同场景下都能稳定、正确地运行。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "第四阶段：后台学习系统实现",
        "description": "根据需求文档V2.1，完成第四阶段的后台学习系统实现。这包括实现SchemaLearnerAgent的核心能力（如聚类、归纳），定义一个用于后台学习的独立GroupChat，并创建一个简单的管理模块（AdminModule）来启动学习流程和处理人工审核。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          3
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "实现SchemaLearnerAgent的核心能力",
            "description": "实现SchemaLearnerAgent的聚类和归纳功能，并为这些核心功能编写单元测试以确保其正确性。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "定义并实现后台学习的GroupChat",
            "description": "基于AutoGen定义一个专用于后台学习的GroupChat，并进行配置，确保Agent可以在其中正确协作。编写初步的集成测试验证Chat的设置。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "创建AdminModule用于启动和审核",
            "description": "创建一个简单的AdminModule，提供启动后台学习流程的接口，并能接收学习结果以供人工审核。此模块的功能需要通过测试验证。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 4,
            "title": "集成并测试后台学习系统",
            "description": "将SchemaLearnerAgent, GroupChat, 和AdminModule集成在一起，形成完整的后台学习工作流。编写端到端测试，模拟一次完整的学习、审核流程，确保系统稳定运行。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 4
          }
        ]
      },
      {
        "id": 5,
        "title": "第五阶段：重构事件抽取和验证模块",
        "description": "重构事件抽取和验证模块，以提高准确性和可维护性。这可能包括重新设计Schema、改进抽取逻辑或增强验证步骤。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "建立统一的Pydantic Schema作为唯一真实来源",
            "description": "让 schemas.py 成为事件定义的唯一真实来源 (Single Source of Truth)。基于 event_schemas.json 的结构，在 schemas.py 中创建或完善所有事件的 Pydantic 模型。添加一个工具函数，可以从 Pydantic 模型动态生成 JSON Schema。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "定义抽取器抽象基类(BaseEventExtractor)",
            "description": "解耦服务和具体的抽取器实现。创建一个 base_extractor.py 文件，在其中定义一个抽象基类 BaseEventExtractor，并规定所有抽取器都必须实现的核心方法（如 extract）。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 3,
            "title": "使验证器适配Pydantic并集成deepseek-chat",
            "description": "简化验证流程。改造 EventExtractionValidator，使其直接使用 schemas.py 中的 Pydantic 模型进行验证，而不是读取外部 JSON 文件。在需要时集成 deepseek-chat 进行名称匹配。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 4,
            "title": "重构 EventExtractionService 以实现依赖注入",
            "description": "实现依赖注入，降低耦合。修改 EventExtractionService 的构造函数，使其不再自己创建实例，而是接收一个 BaseEventExtractor 类型的对象作为参数。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 5,
            "title": "适配 DeepSeekEventExtractor 以符合新接口",
            "description": "使现有实现符合新标准。让 DeepSeekEventExtractor 继承自新的 BaseEventExtractor，并确保其返回的数据是 schemas.py 中定义的 Pydantic 模型实例。在需要时利用 deepseek-chat 进行实体标准化。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 6,
            "title": "清理冗余文件和代码",
            "description": "移除废弃内容。在所有重构完成后，安全地删除 event_schemas.json 和旧的 extractor.py。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 7,
            "title": "更新单元测试以匹配新架构",
            "description": "确保新架构的稳定性。更新所有受影响的单元测试，以匹配新的类构造方式和数据返回类型。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "重构实体去重模块以集成LLM进行智能标准化",
        "description": "重构实体去重模块(EntityDeduplicator)，集成大模型能力以提高名称标准化的准确性。当前模块过于依赖固定的后缀规则，导致对'Tencent Holdings'等名称的错误处理。新的实现将采用混合策略：优先使用保守的规则进行快速处理，对于复杂情况则调用大模型进行智能判断。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "修改 EntityDeduplicator 构造函数以支持 LLM 客户端",
            "description": "更新 EntityDeduplicator 的 __init__ 方法，使其能够接收并存储一个LLM客户端实例。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "实现 LLM 驱动的名称标准化方法",
            "description": "创建 _normalize_name_with_llm 方法，该方法将使用few-shot prompt调用LLM来获取标准化的实体名称。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "在匹配函数中集成 LLM 标准化逻辑",
            "description": "在 _exact_match_score 和 _alias_match_score 中引入调用新LLM标准化方法的逻辑。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 4,
            "title": "更新单元测试以覆盖新逻辑",
            "description": "更新并添加单元测试，以验证新的规则和LLM标准化逻辑。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 6
          }
        ]
      },
      {
        "id": 7,
        "title": "重构工作流以支持异步、文件驱动的人机交互",
        "description": "将一次性的 `run_agent_workflow.py` 脚本重构为一个可中断、可恢复的异步工作流。该工作流将通过状态文件和审核文件与用户进行交互，以适应用户无法实时在线的场景。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "设计并实现状态管理系统",
            "description": "创建 workflow_state.json 的数据结构。实现加载和保存工作流状态的函数，包括当前阶段、输入文件路径、分流结果、已抽取的事件和关系等。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 2,
            "title": "创建主工作流控制器",
            "description": "开发新的 run_async_workflow.py 脚本。该脚本将作为工作流的唯一入口点，负责读取状态、调度不同阶段的执行，并处理用户回复。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 3,
            "title": "重构“分流”阶段为异步模块",
            "description": "将 TriageAgent 的逻辑封装成一个独立的函数。该函数执行后，会更新状态文件，并生成一个 review_request.txt，要求用户确认事件分类。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 4,
            "title": "重构“抽取”阶段为异步模块",
            "description": "将 ExtractionAgent 的逻辑封装成一个独立的函数。该函数在用户确认分流后执行，将抽取的事件写入状态文件，并生成一个新的 review_request.txt，要求用户审核或修正抽取结果。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 5,
            "title": "重构“关系分析与存储”阶段",
            "description": "将 RelationshipAnalysisAgent 和 StorageAgent 的逻辑合并为一个最终处理函数。该函数在用户确认抽取结果后执行，完成关系分析、数据存储，并最终将工作流状态标记为“完成”。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 6,
            "title": "实现用户反馈处理逻辑",
            "description": "在主控制器中，开发用于解析 review_response.txt 的功能。根据用户的回复（例如，status: CONFIRMED 或 data: [...]），更新 workflow_state.json。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 7,
            "title": "编写用户操作指南",
            "description": "创建一个 README_ASYNC.md 文件，清晰地说明如何启动新工作流、如何查看审核请求，以及如何编写回复文件来与系统互动。",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 7
          }
        ]
      },
      {
        "id": 8,
        "title": "Task #1: 稳健的批量初筛",
        "description": "开发 run_batch_triage.py。核心要求：1. 实现批处理和检查点机制。2. 必须动态加载最新的事件Schema来执行分类。3. 输出单一的、待审核的 triage_pending_review.jsonl 文件。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Task #2: 人类智慧网关 - 离线审核",
        "description": "开发审核辅助脚本 (prepare_review_file.py 和 process_review_results.py)，并定义清晰的CSV审核流程。目标是高效地将AI的初步分类转化为高质量的、经过人类校准的 final_known_events.jsonl 和 final_unknown_events.jsonl。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          8
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Task #3: 知识增长引擎 - 交互式学习",
        "description": "开发 run_learning_workflow.py。该脚本读取 final_unknown_events.jsonl，通过人机交互指导 SchemaLearnerAgent 完成学习，并将新学会的Schema更新到核心的 event_schemas.json 文件中，为系统的下一次迭代提供增长。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          9
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Task #4: 价值实现 - 批量抽取",
        "description": "开发 run_extraction_workflow.py。该脚本读取高质量的 final_known_events.jsonl，对所有已知事件进行批量化、结构化的信息抽取，产出可直接用于图谱构建的 structured_events.jsonl。",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          9
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Task #1: 奠定基石 - 建立中央状态库与配置文件",
        "description": "1. 设计并创建`master_state.db` (SQLite)，用于追踪每个数据点的生命周期状态。2. 创建唯一的`config.yaml`中央配置文件，管理所有路径、批次大小、模型名称等参数。3. 开发一个所有其他脚本都将引用的配置加载模块。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Task #2: 实施第一阶段 - 开发与状态库集成的批量初筛工作流",
        "description": "开发`run_batch_triage.py`。它必须：1. 从`config.yaml`读取配置。2. 从`master_state.db`查询状态为`pending_triage`的数据。3. 在分类时引入置信度分数。4. 将分类结果和置信度写回`master_state.db`，并更新状态为`pending_review`。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          12
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Task #3: 实施第二阶段 - 开发支持优先级的离线人工审核工作流",
        "description": "开发审核辅助脚本。`prepare_review_file.py`需从数据库查询待审核数据，并根据置信度排序生成CSV。`process_review_results.py`需读取审核后的CSV，并将最终结果更新回`master_state.db`，设置状态为`pending_learning`或`pending_extraction`。",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [
          13
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Task #4: 实施第三阶段 - 开发增强型交互式学习工作流",
        "description": "开发`run_learning_workflow.py`。它必须：1. 从数据库查询待学习数据。2. 实现更丰富的交互指令(如`show_samples`, `merge_clusters`)。3. 在学会新Schema后，将`event_schemas.json`更新，并把对应数据的状态在数据库中重置为`pending_triage`，以闭合知识循环。",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          14
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Task #5: 实施第四阶段 - 开发批量抽取工作流",
        "description": "开发`run_extraction_workflow.py`。它从`master_state.db`查询状态为`pending_extraction`的数据，进行批量抽取，并将最终的结构化数据存入指定位置，同时在数据库中将任务状态更新为`completed`。",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          14
        ],
        "priority": "medium",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-16T12:53:46.081Z",
      "updated": "2025-07-28T12:47:18.154Z",
      "description": "Tasks for master context"
    }
  }
}